## @file
# Azure Pipeline build file for building a platform.
#
# Platform: QemuQ35
# OS: Windows
# Toolchain: VS2022
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##
trigger:
- release/*
pr:
- release/*

jobs:
  - job: Platform_CI
    variables:
      package: 'QemuQ35Pkg'
      vm_image: 'windows-2022'
      should_run: true
      run_flags: "QEMU_HEADLESS=TRUE EMPTY_DRIVE=TRUE"
      rust_target: 1.64.0 # Stable branch as of 10/21/2022
      RUSTUP_TOOLCHAIN: "ms-$(rust_target)"
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"

    #Use matrix to speed up the build process
    strategy:
        matrix:

          QemuQ35_DEBUG:
            Build.File: "Platforms/$(package)/PlatformBuild.py"
            Build.Arch: "IA32,X64"
            Build.Flags: ""
            Build.Target: "DEBUG"
            Run.Flags: $(run_flags)
            Run: $(should_run)

          QemuQ35_RELEASE:
            Build.File: "Platforms/$(package)/PlatformBuild.py"
            Build.Arch: "IA32,X64"
            Build.Flags: ""
            Build.Target: "RELEASE"
            Run.Flags: $(run_flags)
            Run: $(should_run)

          # NOOPT build too big to fit in FV.
          #QemuQ35_NOOPT:
          #   Build.File: "Platforms/$(package)/PlatformBuild.py"
          #   Build.Arch: "IA32,X64"
          #   Build.Flags: ""
          #   Build.Target: "NOOPT"
          #   Run.Flags: $(run_flags)
          #   Run: $(should_run)

    workspace:
      clean: all

    pool:
      vmImage: $(vm_image)

    steps:
    - template: ../../../.azurepipelines/templates/platform-build-run-steps.yml
      parameters:
        tool_chain_tag: VS2022
        build_pkg: $(package)
        build_target: $(Build.Target)
        build_arch: $(Build.Arch)
        build_file: $(Build.File)
        build_flags: $(Build.Flags)
        run_flags: $(Run.Flags)
        extra_install_step:
        - powershell: choco install qemu --version=2020.08.14; Write-Host "##vso[task.prependpath]c:\Program Files\qemu"
          displayName: Install QEMU and Set QEMU on path # friendly name displayed in the UI
          condition: and(gt(variables.pkg_count, 0), succeeded())
        - task: RustInstaller@1
          inputs:
            rustVersion: ms-$(rust_target)
            authenticationToken: $(RustInstallerToken)
          displayName: Install Microsoft Rust toolchain
        - task: Powershell@2
          inputs:
            targetType: 'inline'
            script: cargo install --force cargo-make
          displayName: Install Cargo Make
        - task: Powershell@2 # In order to comply with msrustup
          inputs:
            targetType: 'inline'
            script: |
              New-Item -Path .cargo -ItemType Directory
              New-Item -Path .cargo/config.toml -ItemType File
              " 
              [source]
              crates-io = { replace-with = `"ms-crates-io`" }
              ms-crates-io = { registry = `"$(MsCratesIO)`" }" | Out-File -FilePath .cargo/config.toml -Append -encoding ASCII
          displayName: Overriding default crates-io with internal ms-crates-io

