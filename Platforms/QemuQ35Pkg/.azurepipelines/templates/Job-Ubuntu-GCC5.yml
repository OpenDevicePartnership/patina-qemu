## @file
# Azure Pipeline build file for building a platform.
#
# Platform: QemuQ35
# OS: Ubuntu
# Toolchain: GCC
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

jobs:
  - job: Q35_GCC
    displayName: QemuQ35Pkg GCC

    variables:
      - group: architectures-x86-64
      - group: tool-chain-ubuntu-gcc
      - name: package
        value: QemuQ35Pkg
      - name: should_run
        value: true
      - name: run_flags
        value: "QEMU_HEADLESS=TRUE EMPTY_DRIVE=TRUE"

    # Use matrix to speed up the build process
    strategy:
        matrix:

          QemuQ35_DEBUG:
            Build.File: "Platforms/$(package)/PlatformBuild.py"
            Build.Arch: $(arch_list)
            Build.Flags: ""
            Build.Target: "DEBUG"
            Run.Flags: $(run_flags)
            Run: $(should_run)

          QemuQ35_RELEASE:
            Build.File: "Platforms/$(package)/PlatformBuild.py"
            Build.Arch: $(arch_list)
            Build.Flags: ""
            Build.Target: "RELEASE"
            Run.Flags: $(run_flags)
            Run: $(should_run)

          # NOOPT build too big to fit in FVs
          #QemuQ35_NOOPT:
          #  Build.File: "Platforms/$(package)/PlatformBuild.py"
          #  Build.Arch: $(arch_list)
          #  Build.Flags: ""
          #  Build.Target: "NOOPT"
          #  Run.Flags: $(run_flags)
          #  Run: $(should_run)
    workspace:
      clean: all

    pool:
      vmImage: $(vm_image)

    container:
      image: ghcr.io/tianocore/containers/fedora-35-test:5b8a008
      options: --security-opt seccomp=unconfined

    steps:
    - script: echo "##vso[task.prependpath]/home/vsts_azpcontainer/.local/bin"
      displayName: Add User Local Bin to Path
    - template: Steps/BuildPlatform.yml@mu_devops
      parameters:
        tool_chain_tag: $(tool_chain_tag)
        build_pkg: $(package)
        build_target: $(Build.Target)
        build_arch: $(Build.Arch)
        build_file: $(Build.File)
        build_flags: $(Build.Flags)
        extra_install_step:
        - template: ../../../../.azurepipelines/templates/git-config-auth.yml
        - script: sudo dnf --assumeyes install openssl-devel
          displayName: Install openssl
        - task: RustInstaller@1
          inputs:
            rustVersion: ms-$(RustVersion)
            authenticationToken: $(RustInstallerToken)
          displayName: Install Microsoft Rust toolchain
        - task: Powershell@2 # In order to comply with msrustup
          inputs:
            targetType: 'inline'
            script: |
              New-Item -Path .cargo -ItemType Directory
              New-Item -Path .cargo/config.toml -ItemType File
              "
              [source]
              crates-io = { replace-with = 'ms-crates-io' }
              ms-crates-io = { registry = '$(MsCratesIO)' }

              [net]
              git-fetch-with-cli = true" | Out-File -FilePath .cargo/config.toml -Append -encoding ASCII

          displayName: Overriding default crates-io with internal ms-crates-io
        - task: Powershell@2
          inputs:
            targetType: 'inline'
            script: cargo install --force cargo-make
          displayName: Install Cargo Make
        run_flags: $(Run.Flags)
        install_tools: false
        artifacts_identifier: '$(package) $(tool_chain_tag) $(Build.Target)'
        artifacts_binary: |
          **/QEMUQ35_*.fd
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage Results'
      continueOnError: true
      condition: and( succeededOrFailed(),gt(variables.pkg_count, 0))
      inputs:
        CodeCoverageTool: 'Cobertura'
        SummaryFileLocation: 'Build/cobertura.xml'
