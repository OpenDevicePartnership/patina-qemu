## @file
# Azure Pipeline build file for building a platform.
#
# Platform: QemuQ35
# OS: Windows
# Toolchain: Visual Studio
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

jobs:
  - job: Q35_VS
    displayName: QemuQ35Pkg VS

    variables:
      - group: architectures-x86-64
      - group: tool-chain-windows-visual-studio-latest
      - name: package
        value: QemuQ35Pkg
      - name: should_run
        value: true
      - name: run_flags
        value: "QEMU_HEADLESS=TRUE EMPTY_DRIVE=TRUE TEST_REGEX=*TestApp.efi"

    #Use matrix to speed up the build process
    strategy:
        matrix:

          QemuQ35_DEBUG:
            Build.File: "Platforms/$(package)/PlatformBuild.py"
            Build.Arch: $(arch_list)
            Build.Flags: ""
            Build.Target: "DEBUG"
            Run.Flags: $(run_flags)
            Run: $(should_run)
            Build.ArtifactsBinary: |
              **/QEMUQ35_*.fd

          QemuQ35_RELEASE:
            Build.File: "Platforms/$(package)/PlatformBuild.py"
            Build.Arch: $(arch_list)
            Build.Flags: ""
            Build.Target: "RELEASE"
            Run.Flags: $(run_flags)
            Run: $(should_run)
            Build.ArtifactsBinary: |
              **/QEMUQ35_*.fd

          # NOOPT build too big to fit in FV.
          #QemuQ35_NOOPT:
          #   Build.File: "Platforms/$(package)/PlatformBuild.py"
          #   Build.Arch: $(arch_list)
          #   Build.Flags: ""
          #   Build.Target: "NOOPT"
          #   Run.Flags: $(run_flags)
          #   Run: $(should_run)

    workspace:
      clean: all

    pool:
      vmImage: $(vm_image)

    steps:
    - template: Steps/BuildPlatform.yml@mu_devops
      parameters:
        tool_chain_tag: $(tool_chain_tag)
        build_pkg: $(package)
        build_target: $(Build.Target)
        build_arch: $(Build.Arch)
        build_file: $(Build.File)
        build_flags: $(Build.Flags)
        run_flags: $(Run.Flags)
        run_timeout: 20
        extra_install_step:
        # setup the git creds
        - template: ../../../../.azurepipelines/templates/git-config-auth.yml
        - powershell: choco install qemu --version=2022.8.31; Write-Host "##vso[task.prependpath]c:\Program Files\qemu"
          displayName: Install QEMU and Set QEMU on path # friendly name displayed in the UI
          condition: and(gt(variables.pkg_count, 0), succeeded())
        - task: RustInstaller@1
          inputs:
            cratesIoFeedOverride: $(CratesIoFeedOverride)
            rustVersion: ms-$(RustVersion)
            toolchainFeed: $(RustToolChainFeed)
          displayName: Install Microsoft Rust toolchain
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'specific'
            project: 'MsUEFI'
            definition: 101356 # The pipeline definition
            targetPath: $(CARGO_HOME)\bin\
            itemPattern: '**/cargo-make.exe'
            artifactName: 'Binaries'
          displayName: Download Cargo Make
        artifacts_identifier: '$(package) $(tool_chain_tag) $(Build.Target)'
        artifacts_binary: $(Build.ArtifactsBinary)
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage Results'
      continueOnError: true
      condition: and( succeededOrFailed(),gt(variables.pkg_count, 0))
      inputs:
        CodeCoverageTool: 'Cobertura'
        SummaryFileLocation: 'Build/cobertura.xml'
